{"ast":null,"code":"import { BehaviorSubject } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ConnexionService {\n  get username() {\n    return this._username;\n  }\n  constructor(http) {\n    this.http = http;\n    this.isLoggedIn = new BehaviorSubject(false);\n    this._username = '';\n    this.storedID = -1;\n    this.isConnected = this.isLoggedIn.asObservable();\n    const storedUsername = localStorage.getItem('username');\n    const storedID = localStorage.getItem('id');\n    if (storedUsername) {\n      this._username = storedUsername;\n      this.storedID = storedID;\n      this.isLoggedIn.next(true);\n    }\n  }\n  Login(value) {\n    this._username = value;\n    this.isLoggedIn.next(true);\n  }\n  Logout() {\n    this._username = '';\n    this.isLoggedIn.next(false);\n    localStorage.removeItem('username');\n  }\n  static #_ = this.ɵfac = function ConnexionService_Factory(t) {\n    return new (t || ConnexionService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ConnexionService,\n    factory: ConnexionService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["BehaviorSubject","ConnexionService","username","_username","constructor","http","isLoggedIn","storedID","isConnected","asObservable","storedUsername","localStorage","getItem","next","Login","value","Logout","removeItem","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\guigu\\Desktop\\EPF\\5A\\java\\TrackEventV2\\TrackEvent\\Front-end\\src\\app\\services\\connexion.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {HttpClient} from \"@angular/common/http\";\nimport {BehaviorSubject, Observable} from \"rxjs\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConnexionService {\n  private isLoggedIn = new BehaviorSubject<boolean>(false);\n  private _username: string = '';\n  private storedID: number = -1;\n\n  isConnected:Observable<boolean> = this.isLoggedIn.asObservable()\n\n  get username() {\n    return this._username;\n  }\n\n  constructor(private http: HttpClient) {\n    const storedUsername = localStorage.getItem('username');\n    const storedID = localStorage.getItem('id');\n    if (storedUsername) {\n      this._username = storedUsername;\n      this.storedID = storedID\n      this.isLoggedIn.next(true);\n    }\n  }\n  Login(value: string) {\n    this._username = value;\n    this.isLoggedIn.next(true);\n  }\n\n  Logout() {\n    this._username = '';\n    this.isLoggedIn.next(false);\n    localStorage.removeItem('username');\n  }\n\n\n\n}\n"],"mappings":"AAEA,SAAQA,eAAe,QAAmB,MAAM;;;AAKhD,OAAM,MAAOC,gBAAgB;EAO3B,IAAIC,QAAQA,CAAA;IACV,OAAO,IAAI,CAACC,SAAS;EACvB;EAEAC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAVhB,KAAAC,UAAU,GAAG,IAAIN,eAAe,CAAU,KAAK,CAAC;IAChD,KAAAG,SAAS,GAAW,EAAE;IACtB,KAAAI,QAAQ,GAAW,CAAC,CAAC;IAE7B,KAAAC,WAAW,GAAuB,IAAI,CAACF,UAAU,CAACG,YAAY,EAAE;IAO9D,MAAMC,cAAc,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IACvD,MAAML,QAAQ,GAAGI,YAAY,CAACC,OAAO,CAAC,IAAI,CAAC;IAC3C,IAAIF,cAAc,EAAE;MAClB,IAAI,CAACP,SAAS,GAAGO,cAAc;MAC/B,IAAI,CAACH,QAAQ,GAAGA,QAAQ;MACxB,IAAI,CAACD,UAAU,CAACO,IAAI,CAAC,IAAI,CAAC;;EAE9B;EACAC,KAAKA,CAACC,KAAa;IACjB,IAAI,CAACZ,SAAS,GAAGY,KAAK;IACtB,IAAI,CAACT,UAAU,CAACO,IAAI,CAAC,IAAI,CAAC;EAC5B;EAEAG,MAAMA,CAAA;IACJ,IAAI,CAACb,SAAS,GAAG,EAAE;IACnB,IAAI,CAACG,UAAU,CAACO,IAAI,CAAC,KAAK,CAAC;IAC3BF,YAAY,CAACM,UAAU,CAAC,UAAU,CAAC;EACrC;EAAC,QAAAC,CAAA,G;qBA7BUjB,gBAAgB,EAAAkB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAhBtB,gBAAgB;IAAAuB,OAAA,EAAhBvB,gBAAgB,CAAAwB,IAAA;IAAAC,UAAA,EAFf;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}