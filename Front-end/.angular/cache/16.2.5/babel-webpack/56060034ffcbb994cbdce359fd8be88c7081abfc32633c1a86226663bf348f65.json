{"ast":null,"code":"import { BehaviorSubject } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./public.service\";\nexport class ConnexionService {\n  get username() {\n    return this._username;\n  }\n  constructor(http, publicService) {\n    this.http = http;\n    this.publicService = publicService;\n    this.isLoggedIn = new BehaviorSubject(false);\n    this._username = '';\n    this.ID = -1;\n    this.isConnected = this.isLoggedIn.asObservable();\n    const storedUsername = localStorage.getItem('username');\n    const storedID = localStorage.getItem('id');\n    const storedOrga = localStorage.getItem('orga');\n    if (storedUsername && storedID) {\n      console.log(\"test\");\n      this._username = storedUsername;\n      this.ID = parseInt(storedID, 10);\n      this.isLoggedIn.next(true);\n    }\n  }\n  Login(value) {\n    this.publicService.findByPseudo(value).subscribe(data => {\n      localStorage.setItem('id', data.id.toString());\n      this._username = value;\n      localStorage.setItem('username', value);\n      this.isLoggedIn.next(true);\n    });\n  }\n  Logout() {\n    this._username = '';\n    this.ID = -1;\n    this.isLoggedIn.next(false);\n    localStorage.removeItem('username');\n    localStorage.removeItem('id');\n  }\n  static #_ = this.ɵfac = function ConnexionService_Factory(t) {\n    return new (t || ConnexionService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.PublicService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ConnexionService,\n    factory: ConnexionService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["BehaviorSubject","ConnexionService","username","_username","constructor","http","publicService","isLoggedIn","ID","isConnected","asObservable","storedUsername","localStorage","getItem","storedID","storedOrga","console","log","parseInt","next","Login","value","findByPseudo","subscribe","data","setItem","id","toString","Logout","removeItem","_","i0","ɵɵinject","i1","HttpClient","i2","PublicService","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\guigu\\Desktop\\EPF\\5A\\java\\TrackEventV2\\TrackEvent\\Front-end\\src\\app\\services\\connexion.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {HttpClient} from \"@angular/common/http\";\nimport {BehaviorSubject, Observable} from \"rxjs\";\nimport {PublicService} from \"./public.service\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConnexionService {\n  private isLoggedIn = new BehaviorSubject<boolean>(false);\n  private _username: string = '';\n  private ID: number = -1;\n\n  isConnected:Observable<boolean> = this.isLoggedIn.asObservable()\n\n  get username() {\n    return this._username;\n  }\n\n  constructor(private http: HttpClient, private publicService: PublicService) {\n    const storedUsername = localStorage.getItem('username');\n    const storedID = localStorage.getItem('id');\n    const storedOrga = localStorage.getItem('orga');\n    if (storedUsername && storedID) {\n      console.log(\"test\")\n      this._username = storedUsername;\n      this.ID = parseInt(storedID, 10);\n      this.isLoggedIn.next(true);\n    }\n  }\n  Login(value: string) {\n    this.publicService.findByPseudo(value).subscribe((data) => {\n      localStorage.setItem('id', (data.id).toString());\n      this._username = value;\n      localStorage.setItem('username', value);\n      this.isLoggedIn.next(true);\n    },\n\n\n  }\n\n  Logout() {\n    this._username = '';\n    this.ID = -1;\n    this.isLoggedIn.next(false);\n    localStorage.removeItem('username');\n    localStorage.removeItem('id');\n  }\n\n\n\n}\n"],"mappings":"AAEA,SAAQA,eAAe,QAAmB,MAAM;;;;AAMhD,OAAM,MAAOC,gBAAgB;EAO3B,IAAIC,QAAQA,CAAA;IACV,OAAO,IAAI,CAACC,SAAS;EACvB;EAEAC,YAAoBC,IAAgB,EAAUC,aAA4B;IAAtD,KAAAD,IAAI,GAAJA,IAAI;IAAsB,KAAAC,aAAa,GAAbA,aAAa;IAVnD,KAAAC,UAAU,GAAG,IAAIP,eAAe,CAAU,KAAK,CAAC;IAChD,KAAAG,SAAS,GAAW,EAAE;IACtB,KAAAK,EAAE,GAAW,CAAC,CAAC;IAEvB,KAAAC,WAAW,GAAuB,IAAI,CAACF,UAAU,CAACG,YAAY,EAAE;IAO9D,MAAMC,cAAc,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;IACvD,MAAMC,QAAQ,GAAGF,YAAY,CAACC,OAAO,CAAC,IAAI,CAAC;IAC3C,MAAME,UAAU,GAAGH,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IAC/C,IAAIF,cAAc,IAAIG,QAAQ,EAAE;MAC9BE,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;MACnB,IAAI,CAACd,SAAS,GAAGQ,cAAc;MAC/B,IAAI,CAACH,EAAE,GAAGU,QAAQ,CAACJ,QAAQ,EAAE,EAAE,CAAC;MAChC,IAAI,CAACP,UAAU,CAACY,IAAI,CAAC,IAAI,CAAC;;EAE9B;EACAC,KAAKA,CAACC,KAAa;IACjB,IAAI,CAACf,aAAa,CAACgB,YAAY,CAACD,KAAK,CAAC,CAACE,SAAS,CAAEC,IAAI,IAAI;MACxDZ,YAAY,CAACa,OAAO,CAAC,IAAI,EAAGD,IAAI,CAACE,EAAE,CAAEC,QAAQ,EAAE,CAAC;MAChD,IAAI,CAACxB,SAAS,GAAGkB,KAAK;MACtBT,YAAY,CAACa,OAAO,CAAC,UAAU,EAAEJ,KAAK,CAAC;MACvC,IAAI,CAACd,UAAU,CAACY,IAAI,CAAC,IAAI,CAAC;IAC5B,CAAC,CAAC;EAGJ;EAEAS,MAAMA,CAAA;IACJ,IAAI,CAACzB,SAAS,GAAG,EAAE;IACnB,IAAI,CAACK,EAAE,GAAG,CAAC,CAAC;IACZ,IAAI,CAACD,UAAU,CAACY,IAAI,CAAC,KAAK,CAAC;IAC3BP,YAAY,CAACiB,UAAU,CAAC,UAAU,CAAC;IACnCjB,YAAY,CAACiB,UAAU,CAAC,IAAI,CAAC;EAC/B;EAAC,QAAAC,CAAA,G;qBAvCU7B,gBAAgB,EAAA8B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,aAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAhBpC,gBAAgB;IAAAqC,OAAA,EAAhBrC,gBAAgB,CAAAsC,IAAA;IAAAC,UAAA,EAFf;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}